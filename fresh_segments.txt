A. Data Exploration and Cleansing

1.Update the fresh_segments.interest_metrics table by modifying the month_year column to be a date data type with the start of the month
ALTER TABLE fresh_segments.interest_metrics 
ALTER COLUMN month_year TYPE VARCHAR(10);

UPDATE fresh_segments.interest_metrics
SET month_year = SUBSTRING(month_year from 4 for 4) || '-' || SUBSTRING(month_year from 1 for 2) || '01';

ALTER TABLE fresh_segments.interest_metrics
ALTER COLUMN month_year TYPE DATE
USING month_year::DATE;

2. What is count of records in the fresh_segments.interest_metrics for each month_year value sorted in chronological order (earliest to latest) with the null values appearing first?
SELECT month_year, COUNT(*)
FROM fresh_segments.interest_metrics
GROUP BY month_year
ORDER BY month_year NULLS FIRST;

3.What do you think we should do with these null values in the fresh_segments.interest_metrics?
SELECT 
	ROUND(SUM(CASE WHEN _year IS NULL THEN 1 END)*100.0/
	COUNT(*),2) as null_percentage
FROM fresh_segments.interest_metrics

4.How many interest_id values exist in the fresh_segments.interest_metrics table but not in the fresh_segments.interest_map table? What about the other way around?
SELECT 
	COUNT(DISTINCT i.interest_id) metrict_count,
	COUNT(DISTINCT m.id) map_count,
	SUM(CASE WHEN i.interest_id IS NULL THEN 1 END) as metrict_not_count,
	SUM(CASE WHEN m.id IS NULL THEN 1 END) as map_not_count
FROM fresh_segments.interest_metrics i
FULL OUTER JOIN fresh_segments.interest_map m ON i.interest_id = m.id

5.Summarise the id values in the fresh_segments.interest_map by its total record count in this table
SELECT 
	m.id, 
	m.interest_name, 
	COUNT(i.interest_id) total_record
FROM fresh_segments.interest_map m 
LEFT JOIN fresh_segments.interest_metrics i ON m.id = i.interest_id
GROUP BY m.id, m.interest_name
ORDER BY m.id, m.interest_name;

6.What sort of table join should we perform for our analysis and why? Check your logic by checking the rows where interest_id = 21246 in your joined output and include all columns from fresh_segments.interest_metrics and all columns from
SELECT *
FROM fresh_segments.interest_map map
INNER JOIN fresh_segments.interest_metrics metrics
  ON map.id = metrics.interest_id
WHERE metrics.interest_id = 21246   
  AND metrics._month IS NOT NULL;

7. Are there any records in your joined table where the month_year value is before the created_at value from the fresh_segments.interest_map table? Do you think these values are valid and why?
SELECT COUNT(*) num_interest_before_create
FROM fresh_segments.interest_map m
JOIN fresh_segments.interest_metrics i 
ON m.id = i.interest_id
WHERE i.month_year < m.created_at;

