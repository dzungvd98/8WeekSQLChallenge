A. Customer Nodes Exploration

1. How many unique nodes are there on the Data Bank system?
SELECT COUNT(DISTINCT node_id) as number_node
FROM customer_nodes;

2. What is the number of nodes per region?
SELECT 
	r.region_id, 
	r.region_name, 
	COUNT(DISTINCT c.node_id) as number_node
FROM customer_nodes c
JOIN regions r
	ON c.region_id = r.region_id
GROUP BY 
	r.region_id, 
	r.region_name
ORDER BY r.region_id;

3. How many customers are allocated to each region?
SELECT r.region_id, 
		r.region_name, 
		COUNT(DISTINCT customer_id) as number_customer
FROM customer_nodes c
JOIN regions r
	ON c.region_id = r.region_id

GROUP BY 
	r.region_id, 
	r.region_name
ORDER BY r.region_id;

4. How many days on average are customers reallocated to a different node?
5. What is the median, 80th and 95th percentile for this same reallocation days metric for each region?



B. Customer Transactions
1. What is the unique count and total amount for each transaction type?
SELECT
  txn_type, 
  COUNT(customer_id) AS transaction_count, 
  SUM(txn_amount) AS total_amount
FROM data_bank.customer_transactions
GROUP BY txn_type;

2. What is the average total historical deposit counts and amounts for all customers?
WITH deposits AS (
  SELECT 
    customer_id, 
    COUNT(customer_id) AS txn_count, 
    AVG(txn_amount) AS avg_amount
  FROM data_bank.customer_transactions
  WHERE txn_type = 'deposit'
  GROUP BY customer_id
)

SELECT 
  ROUND(AVG(txn_count)) AS avg_deposit_count, 
  ROUND(AVG(avg_amount)) AS avg_deposit_amt
FROM deposits;

3.For each month - how many Data Bank customers make more than 1 deposit and either 1 purchase or 1 withdrawal in a single month?
WITH number_customer_transaction AS (
SELECT  customer_id, 
		CONCAT(DATEPART(MONTH, txn_date), '/', DATEPART(YEAR, txn_date)) as month_year, 
		SUM(CASE WHEN txn_type = 'deposit' THEN 1 ELSE 0 END) as number_deposit,
		SUM(CASE WHEN txn_type = 'purchase' OR txn_type = 'withdrawal' THEN 1 ELSE 0 END) as number_purwith
FROM customer_transactions
GROUP BY 
		customer_id, 
		CONCAT(DATEPART(MONTH, txn_date), '/', DATEPART(YEAR, txn_date))
)
SELECT 
	month_year, 
	COUNT(customer_id) as number_customer
FROM number_customer_transaction
WHERE 
	number_deposit > 1 AND 
	number_purwith >= 1
GROUP BY month_year;

4.What is the closing balance for each customer at the end of the month?
DECLARE @StartDate DATE = '2020-01-01';

DECLARE @EndDate DATE = '2020-4-30';

WITH number_month AS
  (SELECT TOP (DATEDIFF(MONTH, @StartDate, @EndDate) + 1) ROW_NUMBER() OVER(
                                                                            ORDER BY
                                                                              (SELECT NULL))-1 AS n
   FROM master.dbo.spt_values),
     day_start_end AS
  (SELECT CAST(CONCAT(YEAR(DATEADD(MONTH, n, @StartDate)), '-', MONTH(DATEADD(MONTH, n, @StartDate)), '-01') AS DATE) start_month,
          EOMONTH(DATEADD(MONTH, n, @StartDate)) AS ending_month
   FROM number_month),
     list_customer AS
  (SELECT DISTINCT customer_id
   FROM customer_transactions),
     customer_and_endmonth AS
  (SELECT l.customer_id,
          d.ending_month
   FROM list_customer l
   CROSS JOIN day_start_end d),
     customer_month_amount AS
  (SELECT customer_id,
          DATEPART(MONTH, txn_date) AS month_,
          SUM (CASE
                   WHEN txn_type = 'deposit' THEN txn_amount
                   ELSE -txn_amount
               END) AS amount_transac
   FROM customer_transactions
   GROUP BY customer_id,
            DATEPART(MONTH, txn_date)),
     customer_monthly_amount AS
  (SELECT ca.customer_id,
          ca.ending_month,
          COALESCE(cm.amount_transac, 0) amoun_trans
   FROM customer_and_endmonth ca
   LEFT JOIN customer_month_amount cm ON ca.customer_id = cm.customer_id
   AND MONTH(ca.ending_month) = cm.month_)
SELECT customer_id,
       ending_month,
       amoun_trans,
       SUM(amoun_trans) OVER(PARTITION BY customer_id
                             ORDER BY ending_month)
FROM customer_monthly_amount
ORDER BY customer_id

5.What is the percentage of customers who increase their closing balance by more than 5%?
WITH number AS ( --number from 0 to datediff number
	SELECT TOP (DATEDIFF(month, '2020-01-01', '2020-04-30') + 1) ROW_NUMBER() OVER(ORDER BY (SELECT NULL)) - 1 AS n
	FROM master.dbo.spt_values),
end_month AS ( --list endmonth by EOMONTH 
	SELECT EOMONTH(DATEADD(MONTH, n, '2020-01-01')) as end_date
	FROM number),
user_end_month AS ( -- cross join to user and end date of month
	SELECT DISTINCT c.customer_id, e.end_date
	FROM customer_transactions c
	CROSS JOIN end_month e),
user_amount AS( -- amount use of customer
	SELECT customer_id, 
		MONTH(txn_date) as month_data, 
		SUM (CASE WHEN txn_type = 'deposit' THEN txn_amount ELSE -txn_amount END) as total_amount
	FROM customer_transactions
	GROUP BY customer_id, MONTH(txn_date)),
user_month_balance AS ( -- join to get user and end month balance
	SELECT 
		u.customer_id,  
		u.end_date, 
		COALESCE(ua.total_amount, 0) as total_amount
	FROM user_end_month u
	LEFT JOIN user_amount ua
		ON u.customer_id = ua.customer_id AND MONTH(u.end_date) = ua.month_data),
user_ending_balance AS( -- user end balance on each month
	SELECT 
		customer_id, 
		end_date, 
		total_amount, 
		SUM(total_amount) OVER (PARTITION BY customer_id ORDER BY end_date) as end_balance
	FROM user_month_balance),
	last_user_balance AS ( -- get last balance of user
		SELECT 
			customer_id, 
			end_date,
			COALESCE(LAG(end_balance) OVER(PARTITION BY customer_id ORDER BY end_date), 0) last_balance,
			end_balance
		FROM user_ending_balance),
percent_change_balance AS ( -- get percent change of user
	SELECT customer_id, end_date, 
			CASE 
				WHEN last_balance = 0 AND end_balance > 0 THEN 100 
				WHEN last_balance = 0  AND end_balance < 0 THEN -100
				WHEN last_balance = end_balance THEN 0
 				ELSE ROUND((end_balance-last_balance)*100.0/last_balance,2) END as percent_change
	FROM last_user_balance),
number_customer_change AS ( -- get number usser by end_date end get number user has change percent  > 5 %
	SELECT end_date, COUNT(customer_id) as number_customer, 
	SUM(CASE WHEN percent_change > 5 THEN 1 ELSE 0 END) fit_value
	FROM percent_change_balance 
	GROUP BY end_date)
	-- percent all user  change balance > 5 % in end date
SELECT  end_date,
		ROUND (fit_value*100.0/number_customer,2) as percent_fit
FROM number_customer_change

